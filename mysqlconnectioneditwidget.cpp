#include "mysqlconnectioneditwidget.h"
#include "ui_mysqlconnectioneditwidget.h"

#include "connectionfactory.h"
#include "mysqlconnectionvalidator.h"
#include "connection.h"
#include "defaults.h"

#include <QDebug>

// MysqlConnectionEditWidget::MysqlConnectionEditWidget(QWidget *parent, QMap<QString, QMap<QString, ConnectionInfo*> >* connections) :
MysqlConnectionEditWidget::MysqlConnectionEditWidget(ConnectionManager *parent, Connections* connections) :
    QWidget(parent),
    parent(parent),
    connections(connections),
    ui(new Ui::MysqlConnectionEditWidget)
{
    ui->setupUi(this);
}

void MysqlConnectionEditWidget::parseConnectionInfo(ConnectionInfo *connectionInfo) {
    if ("MYSQL" != connectionInfo->getConnectionType()) {
        return;
    }

    currentConnectionInfo = connectionInfo;

    if (true == connectionInfo->isConnectionNameAutogenerated()) {
        this->ui->connectionNameEdit->setPlaceholderText(connectionInfo->getConnectionName());
    } else {
        this->ui->connectionNameEdit->setText(connectionInfo->getConnectionName());
    }
    this->ui->hostEdit->setText(connectionInfo->getHost());
    this->ui->userEdit->setText(connectionInfo->getUser());
    this->ui->passwordEdit->setText(connectionInfo->getPassword());
    if (0 < connectionInfo->getPort()) {
        this->ui->portEdit->setText(QString::number(connectionInfo->getPort()));
    } else {
        this->ui->portEdit->setPlaceholderText(QString::number(Defaults::MYSQL::PORT));
    }
    this->ui->databaseEdit->setText(connectionInfo->getDatabaseName());

    connect(this->ui->hostEdit, SIGNAL(textChanged(const QString &)), this, SLOT(deactivateSaveBtn(const QString &)));
    connect(this->ui->userEdit, SIGNAL(textChanged(const QString &)), this, SLOT(deactivateSaveBtn(const QString &)));
    connect(this->ui->passwordEdit, SIGNAL(textChanged(const QString &)), this, SLOT(deactivateSaveBtn(const QString &)));
    connect(this->ui->portEdit, SIGNAL(textChanged(const QString &)), this, SLOT(deactivateSaveBtn(const QString &)));

    connect(this->ui->btnTestConnection, SIGNAL(clicked()), this, SLOT(testConnection()));
    testConnection();
}

void MysqlConnectionEditWidget::deactivateSaveBtn(const QString &text) {
    emit(this->parent->invalid(true));
}

bool MysqlConnectionEditWidget::testConnection() {
    ConnectionInfo* connectionInfo = generateConnectionInfo();
    ConnectionFactory connectionFactory;
    Connection* connection = connectionFactory.create(connectionInfo);

    bool connectionState = MysqlConnectionValidator::validate(connection);
    emit parent->invalid(!connectionState);

    delete connection;
    delete connectionInfo;

    if (!connectionState) {
        this->ui->informationText->setText(connection->lastError().text());
    } else {
        this->ui->informationText->setText("");
    }

    return connectionState;
}

ConnectionInfo* MysqlConnectionEditWidget::generateConnectionInfo() {
    ConnectionInfo* connectionInfo = new ConnectionInfo;

    connectionInfo->setConnectionType("MYSQL");
    connectionInfo->setConnectionName(this->ui->connectionNameEdit->text());
    connectionInfo->setHost(this->ui->hostEdit->text());
    connectionInfo->setPort(this->ui->portEdit->text().toInt());
    connectionInfo->setUser(this->ui->userEdit->text());
    connectionInfo->setPassword(this->ui->passwordEdit->text());
    connectionInfo->setDatabaseName(this->ui->databaseEdit->text());

    return connectionInfo;
}

void MysqlConnectionEditWidget::save() {
    QString oldConnectionName = currentConnectionInfo->getConnectionName();
    ConnectionInfo* connectionInfo = generateConnectionInfo();

    // wenn der name der Connection geändert wurde, müssen wir diese connection auch in der collection neu hinterlegen!
    if (oldConnectionName != connectionInfo->getConnectionName()) {
        ConnectionInfo* oldConnectionInfo = new ConnectionInfo;
        oldConnectionInfo->setConnectionName(oldConnectionName);
        oldConnectionInfo->setConnectionType(connectionInfo->getConnectionType());
        connections->replace(oldConnectionInfo, connectionInfo);
    }
    emit connections->changed();
}

MysqlConnectionEditWidget::~MysqlConnectionEditWidget()
{
    delete ui;
}
